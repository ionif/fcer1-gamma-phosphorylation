.. -*- mode: rst ; ispell-local-dictionary: "american" -*-

==========================
pyi-makespec
==========================
-------------------------------------------------------------
Create a spec file for your |PyInstaller| project
-------------------------------------------------------------

:Author:    Giovanni Bajo
:Copyright: 2005-2011 by Giovanni Bajo, based on previous work under copyright 2002 McMillan Enterprises, Inc.
:Version:   |PyInstallerVersion|
:Manual section: 1

.. raw:: manpage

   .\" disable justification (adjust text to left margin only)
   .ad l


SYNOPSIS
==========

``pyi-makespec`` <options> SCRIPT [SCRIPT ...]

DESCRIPTION
============

The spec file is the description of what you want |PyInstaller| to do
with your program. ``pyi-makespec`` is a simple wizard to create spec
files that cover basic usages::

       py-Makespec [--onefile] yourprogram.py

By default, ``pyi-makespec`` generates a spec file that tells
|PyInstaller| to create a distribution directory contains the main
executable and the dynamic libraries. The option ``--onefile``
specifies that you want PyInstaller to build a single file with
everything inside.

In most cases the specfile generated by ``pyi-makespec`` is all you
need. If not, see `When things go wrong` in the manual and be sure to
read the introduction to `Spec Files`.


OPTIONS
========

General Options
--------------------

-h, --help            show this help message and exit
--log-level=LOGLEVEL  Amount of detail in build-time console messages
                      (default: INFO, choose one of DEBUG, INFO, WARN,
                      ERROR, CRITICAL)

What to generate
------------------

-F, --onefile       Create a one-file bundled executable.
-D, --onedir        Create a one-folder bundle containing an executable
                    (default)
--specpath=DIR      Folder to store the generated spec file (default:
                    current directory)
-n NAME, --name=NAME
                    Name to assign to the bundled app and spec file
                    (default: first script's basename)

What to bundle, where to search
---------------------------------

-p DIR, --paths=DIR
                    A path to search for imports (like using PYTHONPATH).
                    Multiple paths are allowed, separated by ':', or use
                    this option multiple times
--hidden-import=MODULENAME
                    Name an import not visible in the code of the
                    script(s). This option can be used multiple times.
--exclude-module=MODULENAME
                    Optional module or package name (his Python name,
                    not path names) that will be ignored (as though
                    it was not found).
                    This option can be used multiple times.
--additional-hooks-dir=HOOKSPATH
                    An additional path to search for hooks. This option
                    can be used multiple times.
--runtime-hook=RUNTIME_HOOKS
                    Path to a custom runtime hook file. A runtime hook is
                    code that is bundled with the executable and is
                    executed before any other code or module to set up
                    special features of the runtime environment. This
                    option can be used multiple times.
--key=KEY           The key used to encrypt Python bytecode.

How to generate
-------------------

-d, --debug         Tell the bootloader to issue progress messages while
                    initializing and starting the bundled app. Used to
                    diagnose problems with missing imports.
-s, --strip         Apply a symbol-table strip to the executable and
                    shared libs (not recommended for Windows)
--noupx             Do not use UPX even if it is available (works
                    differently between Windows and *nix)

Windows and Mac OS X specific options
--------------------------------------------

-c, --console, --nowindowed
                    Open a console window for standard i/o (default)
-w, --windowed, --noconsole
                    Windows and Mac OS X: do not provide a console window
                    for standard i/o. On Mac OS X this also triggers
                    building an OS X .app bundle.This option is ignored in
                    *NIX systems.
-i FILE.ico or FILE.exe,ID or FILE.icns, --icon=FILE.ico or FILE.exe,ID or F
                    FILE.ico: apply that icon to a Windows executable.
                    FILE.exe,ID, extract the icon with ID from an exe.
                    FILE.icns: apply the icon to the .app bundle on Mac OS
                    X

Windows specific options
-------------------------
--version-file=FILE
                    add a version resource from FILE to the exe
-m FILE or XML, --manifest=FILE or XML
                    add manifest FILE or XML to the exe
-r FILE[,TYPE[,NAME[,LANGUAGE]]], --resource=FILE[,TYPE[,NAME[,LANGUAGE]]]
                    Add or update a resource of the given type, name and
                    language from FILE to a Windows executable. FILE can
                    be a data file or an exe/dll. For data files, at least
                    TYPE and NAME must be specified. LANGUAGE defaults to
                    0 or may be specified as wildcard * to update all
                    resources of the given TYPE and NAME. For exe/dll
                    files, all resources from FILE will be added/updated
                    to the final executable if TYPE, NAME and LANGUAGE are
                    omitted or specified as wildcard *.This option can be
                    used multiple times.
--uac-admin         Using this option creates a Manifest which will request
                    elevation upon application restart.
--uac-uiaccess      Using this option allows an elevated application to
                    work with Remote Desktop.


Mac OS X specific options
-------------------------

--osx-bundle-identifier=BUNDLE_IDENTIFIER
                    Mac OS X .app bundle identifier is used as the default
                    unique program name for code signing purposes. The
                    usual form is a hierarchical name in reverse DNS
                    notation. For example:
                    com.mycompany.department.appname (default: first
                    script's basename)


SEE ALSO
=============

``pyi-build``\(1), The PyInstaller Manual, ``pyinstaller``\(1)

Project Homepage |Homepage|

.. include:: _definitions.txt
